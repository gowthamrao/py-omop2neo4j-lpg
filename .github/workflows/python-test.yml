name: Run Python Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5433:5432
        volumes:
          - ./tests/sample_data/init.sql:/docker-entrypoint-initdb.d/init.sql
      neo4j:
        image: neo4j:latest
        env:
          NEO4J_AUTH: neo4j/StrongPass123
          NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
          NEO4J_apoc_import_file_enabled: "true"
          NEO4J_apoc_import_file_use__neo4j__config: "true"
          NEO4JLABS_PLUGINS: '["apoc"]'
        ports:
          - "7474:7474"
          - "7687:7687"
        options: --health-cmd "wget -O /dev/null --server-response --timeout=2 http://neo4j:7474 2>&1 | awk '/^  HTTP/{print $2}' | grep -q 200" --health-interval 5s --health-timeout 5s --health-retries 10

    steps:
      - name: Clean workspace and set owner
        run: sudo chown -R runner:docker .
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: |
          poetry install --no-root --with test
          for i in $(seq 1 3); do
            if sudo apt-get update; then
              break
            fi
            if [ $i -eq 3 ]; then
              exit 1
            fi
            sleep 5
          done
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL to be healthy
        run: |
          until pg_isready -h localhost -p 5433 -U testuser -d testdb; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run tests
        run: |
          poetry run pytest
        env:
          OMOP_SCHEMA: public
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          NEO4J_URI: bolt://neo4j:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: StrongPass123

      - name: Get Postgres logs
        if: always()
        run: docker logs ${{ job.services.postgres.id }}
